<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6中的新特性</title>
    <url>/jialugong.github.io/2019/10/10/ES5%E4%B8%AD%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>吐槽：呜呜呜～，之前忘记保存了，更新速度可能会变慢</p>
<blockquote>
<p>写在之前 ：此文为个人的翻译+粗暴理解，<a href="https://babeljs.io/docs/en/learn" target="_blank" rel="noopener">原文</a></p>
</blockquote>
<ul>
<li><h5 id="箭头函数与this语法"><a href="#箭头函数与this语法" class="headerlink" title="箭头函数与this语法"></a>箭头函数与this语法</h5>大体上，箭头函数可以作为function的替代，但是有一点不同.箭头函数能和他周围的代码一样，共享this语法，如果一个箭头函数在另一个函数中，箭头函数能够共享其父函数的参数变量<br>示例代码：<blockquote>
<p>共享this语法</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bob = &#123;</span><br><span class="line">    _name: <span class="string">"Bob"</span>,</span><br><span class="line">    _friends: [],</span><br><span class="line">    printFriends() &#123;</span><br><span class="line">      <span class="keyword">this</span>._friends.forEach(<span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>._name + <span class="string">" knows "</span> + f));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  bob._friends=[<span class="string">'Alice'</span>,<span class="string">'Ann'</span>,<span class="string">'Tom'</span>]</span><br><span class="line">  bob.printFriends()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>调用父函数的参数变量</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> compute = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> numbers = []</span><br><span class="line">    <span class="keyword">for</span> (number <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">      numbers.push(number*number)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> compute()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>结果为<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> ]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>若箭头函数内为表达式（expression body），可隐式返回结果</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(callback(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y)</span><br></pre></td></tr></table></figure>
<p>结果为<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5>ES5中的类是一个基于原型OO模式的语法糖.简单单一的申明使得类模式的使用更加简单。类支持基于原型的继承，超级调用，实例以及静态方法和构造函数。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>js中的异步</title>
    <url>/jialugong.github.io/2019/09/30/js%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h4><p>笔者是前端初学者，本文主要是对于javascript中异步一个简单的介绍以及列举一些简单的例子，对于js异步的理解，我也是刚刚入门，写这篇文章的目的仅仅是为了记录目前所掌握到的知识</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ul>
<li><h6 id="ES6中的Promise对象"><a href="#ES6中的Promise对象" class="headerlink" title="ES6中的Promise对象"></a>ES6中的Promise对象</h6></li>
<li><h6 id="异步函数的使用方式"><a href="#异步函数的使用方式" class="headerlink" title="异步函数的使用方式"></a>异步函数的使用方式</h6></li>
<li><h6 id="为什么使用异步函数"><a href="#为什么使用异步函数" class="headerlink" title="为什么使用异步函数"></a>为什么使用异步函数</h6></li>
</ul>
<h5 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h5><p>要了解异步，首先应该了解js中的promise对象，因为我们知道，async函数返回的是一个promise对象，我们可以通过以下代码知道<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=test();</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure></p>
<p>返回值<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span> &#123; <span class="string">'hello'</span> &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在编写js时，我们总是不可避免地使用到各种回调函数，而Promise就是把基于回调函数的异步处理对象和处理规则进行规范化，并按照统一的接口来编写(引自<a href="http://liubin.org/promises-book/#introduction" target="_blank" rel="noopener">promise的迷你书</a>)</p>
</blockquote>
<ul>
<li>Promise的三种状态<ul>
<li>Pending</li>
<li>Resovled</li>
<li>Rejected</li>
</ul>
</li>
</ul>
<pre class="mermaid">graph LR
Pending-->Resolved
Pending-->Rejected</pre>

<blockquote>
<p>一个Promise实例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&gt;<span class="number">10</span>)</span><br><span class="line">            resolve(<span class="string">"hello world!"</span>)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            reject(<span class="string">"something wrong!"</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notAsyncFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm the second but I come first"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunction(a).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">notAsyncFunction();</span><br></pre></td></tr></table></figure>
<p>输入输出<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;&gt;a=<span class="number">8</span></span><br><span class="line">&gt;&gt;I<span class="string">'m the second but I come first</span></span><br><span class="line"><span class="string">  something wrong!</span></span><br><span class="line"><span class="string">&gt;&gt;a=20</span></span><br><span class="line"><span class="string">&gt;&gt;I'</span>m the second but I come first</span><br><span class="line">  hello world!</span><br></pre></td></tr></table></figure></p>
<p>通过上面的代码我们可以发现：</p>
<ul>
<li>异步函数不会阻塞代码的执行</li>
<li>Promise最终的返回状态有两种即resolved和rejected</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>一个吐槽</title>
    <url>/jialugong.github.io/2019/09/02/bbb/</url>
    <content><![CDATA[<p>感觉可以做一个<del>踩坑</del>(吐槽)集合了</p>
<ul>
<li>一个困扰了一天的bug,严重地放慢了整个项目的进度.原因是这样的,同学用windows系统做开发,我是用linux系统做开发,然后她将一个eclipse下写的javaweb项目发给我后,我在linux下运行.maven build成功,tomcat的端口也是打开的,结果,结果,<strong>404</strong>,<strong>404</strong>,折腾了一天,开始还以为是maven仓库的问题,就各种倒腾环境,大概浪费了一天的时间,终于在今天,发现是编码问题,<strong>编码</strong>问题,因为windows是GBK编码,而linux是UTF-8编码,我发现这个可能是原因还是因为同学写的一个中文注释在我这边是乱码,然后抱着侥幸心里修了一下,结果就成功了.然而这是有多玄学,之前就没改编码就能运行,然而昨天就不行。<ul>
<li>教训：在协作开发之前，无论是编程环境、接口数据类型还是编码、换行符等事宜，一定得先确定好，有一个规范与标准（泪的教训）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java web</category>
      </categories>
  </entry>
  <entry>
    <title>python在多维线性回归中的应用</title>
    <url>/jialugong.github.io/2019/05/03/python1/</url>
    <content><![CDATA[<blockquote>
<p>写在文章之前:这次是参加学校数模比赛,用到了线性回归模型来拟合三维散点图,由此得到几个因素之间的关系.建议配合R一起使用.</p>
</blockquote>
<h1 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h1><ul>
<li>完善代码注释与函数的扩展</li>
<li>贴出结果图</li>
<li>对于summray结果的分析</li>
<li>对于线性回归模型的扩展</li>
</ul>
<hr>
<ul>
<li><h2 id="关于多元线性回归"><a href="#关于多元线性回归" class="headerlink" title="关于多元线性回归"></a>关于多元线性回归</h2><p>探究三者</p>
</li>
<li><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p><strong>python代码:</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">xx=(<span class="number">112</span>,<span class="number">371</span>,<span class="number">318</span>,<span class="number">445</span>,<span class="number">185</span>,<span class="number">510</span>)</span><br><span class="line">yy=(<span class="number">10452</span>,<span class="number">8617</span>,<span class="number">11089</span>,<span class="number">9169</span>,<span class="number">11388</span>,<span class="number">9308</span>)</span><br><span class="line">zz=(<span class="number">898</span>,<span class="number">741</span>,<span class="number">1686</span>,<span class="number">1024</span>,<span class="number">1408</span>,<span class="number">1113</span>)</span><br><span class="line"></span><br><span class="line">X,Z=np.column_stack((xx,yy)),zz</span><br><span class="line">regr=linear_model.LinearRegression()</span><br><span class="line">regr.fit(X,Z)</span><br><span class="line"><span class="comment">#得到平面的系数和截距</span></span><br><span class="line">a,b=regr.coef_,regr.intercept_</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出散点图</span></span><br><span class="line">fig=plt.figure()</span><br><span class="line">ax=fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line">xxx=np.linspace(<span class="number">1</span>,<span class="number">500</span>,<span class="number">10</span>)</span><br><span class="line">yyy=np.linspace(<span class="number">7000</span>,<span class="number">12000</span>,<span class="number">10</span>)</span><br><span class="line">XXX,YYY=np.meshgrid(xxx,yyy)</span><br><span class="line">XX=np.column_stack((XXX.flatten(),YYY.flatten()))</span><br><span class="line"></span><br><span class="line">ax.scatter(xx,yy,zz,c=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出拟合的平面</span></span><br><span class="line">ax.plot_wireframe(XXX,YYY,regr.predict(XX).reshape(<span class="number">10</span>,<span class="number">10</span>),alpha=<span class="number">0.5</span>)</span><br><span class="line">ax.plot_surface(XXX,YYY,regr.predict(XX).reshape(<span class="number">10</span>,<span class="number">10</span>),alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="结果如图"><a href="#结果如图" class="headerlink" title="结果如图:"></a>结果如图:</h3><p><img src="/jialugong.github.io/2019/05/03/python1/Figure_1.png" alt></p>
<p><strong>用R中的函数,能够得到对于该模型的检验和评价</strong><br><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据</span></span><br><span class="line">x&lt;-c(<span class="number">112</span>,<span class="number">371</span>,<span class="number">318</span>,<span class="number">445</span>,<span class="number">185</span>,<span class="number">510</span>)</span><br><span class="line">y&lt;-c(<span class="number">10452</span>,<span class="number">8617</span>,<span class="number">11089</span>,<span class="number">9169</span>,<span class="number">11388</span>,<span class="number">9308</span>)</span><br><span class="line">z&lt;-c(<span class="number">898</span>,<span class="number">741</span>,<span class="number">1686</span>,<span class="number">1024</span>,<span class="number">1408</span>,<span class="number">1113</span>)</span><br><span class="line"><span class="comment">#进行多元线性分析</span></span><br><span class="line">lm.result&lt;-lm(z~x+y)</span><br><span class="line"><span class="comment">#拟合情况分析</span></span><br><span class="line">summary(lm.result)</span><br><span class="line"><span class="comment">#残差分析(Q-Q图)</span></span><br><span class="line">qqnorm(lm.result)</span><br></pre></td></tr></table></figure></p>
<p><strong>结果分析如下:</strong><br><img src="/jialugong.github.io/2019/05/03/python1/huigui_fenxi.png" alt></p>
<ul>
<li>call:<br>是对于所用的现行回归函数的再现</li>
<li>Residuals<br>一般会显示所得残差的最大值(max),,中位数他<br>但因为此处我们所用的值太少,故R将所有的残差都显示了出来</li>
<li>Coefficients<br>-</li>
</ul>
]]></content>
      <categories>
        <category>python可视化</category>
      </categories>
  </entry>
  <entry>
    <title>实分析学习</title>
    <url>/jialugong.github.io/2019/04/24/math/</url>
    <content><![CDATA[<blockquote>
<p>这只是一个测试,来测试现在是否支持mathjax.</p>
</blockquote>
<h2 id="关于自然数的定义"><a href="#关于自然数的定义" class="headerlink" title="关于自然数的定义"></a>关于自然数的定义</h2><h5 id="运用Peano公理定义自然数"><a href="#运用Peano公理定义自然数" class="headerlink" title="运用Peano公理定义自然数"></a>运用<strong>Peano</strong>公理定义自然数</h5><ul>
<li><strong>peano</strong>公理的定义:<blockquote>
<ul>
<li><strong>公理一</strong>:<br>0是自然数</li>
<li><strong>公理二</strong>:<br>若$n$是自然数,则$n++$也是自然数.</li>
<li><strong>公理三</strong><br>0不是任何自然数的后继.</li>
<li><strong>公理四</strong><br>不同自然数的后继不相同,即,设$m$,$n$是自然数,若$m \neq n$,则$m++ \neq n++$,等价来说(运用逆否命题),若$m++ = n++$,则必有$m=n$.</li>
<li><strong>公理五</strong>(运用数学归纳原理)<br>设$P(n)$是关于自然数的一个性质,假设$P(0)$是真的,并假设只要$P(n)$是真的,则$P(n++)$是真的,那么对于每个自然数$P(n)$都是真的.</li>
</ul>
</blockquote>
</li>
</ul>
<p><em>(一个有趣的点:自然数系$\mathbb{N}$是无限的,然而它个体是有限的,整体大于局部,$\infty$不属于自然数&lt;-(根据公里五的定义,若0是有限的,则自然数系里的每一个数都是有限的))</em></p>
<ul>
<li>命题(递归定义)<br>设对于每个自然数$n$,都有某个函数$f^{}_{n}:\mathbb { N }$</li>
</ul>
]]></content>
      <categories>
        <category>math</category>
      </categories>
  </entry>
</search>
